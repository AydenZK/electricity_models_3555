# Check for NA's
colSums(is.na(data))
# Summary for all columns
sapply(data, summary)
# Between countries
ggplot(data=data, aes(x=reorder(AreaName,TotalLoadValue),y=mean(TotalLoadValue))) + geom_bar(stat='identity', aes(fill=mean(TotalLoadValue))) + coord_flip()
# Yearly plots
eda_data_year <- data %>% filter(AreaName %in% c('France', 'Germany', 'Belgium'))
eda_data_year %>% ggplot(aes(x=DateTime, y=TotalLoadValue, colour = Year)) + geom_line() + facet_wrap(~AreaName)
data <- data %>% select(Year, Month, Day, Hours, dayofweek, TotalLoadValue)
# Try without lagged variables
# Try without scaling
# Try with scaling and lagged variables
# Create unstandardised dataset
lagged_data_usd <- data %>% mutate("hour-1" = lag(TotalLoadValue, n=1), "hour-2" = lag(TotalLoadValue, n=2) ,"day-1" = lag(TotalLoadValue, n=24), "day-7" = lag(TotalLoadValue, n=168)) %>% select(Year, Month, Day, Hours, dayofweek, TotalLoadValue, `day-1`, `day-7`, `hour-1`, `hour-2`) %>% tail(-168)
# Create standardised dataset
lagged_data_sd <- data %>% mutate("hour-1" = lag(TotalLoadValue, n=1), "hour-2" = lag(TotalLoadValue, n=2) ,"day-1" = lag(TotalLoadValue, n=24), "day-7" = lag(TotalLoadValue, n=168)) %>% select(Year, Month, Day, Hours, dayofweek, TotalLoadValue, `day-1`, `day-7`, `hour-1`, `hour-2`) %>% mutate(`day-1`= sqrt(`day-1`), `day-7`= sqrt(`day-7`), `hour-1`= sqrt(`hour-1`), `hour-2`= sqrt(`hour-2`)) %>% tail(-168)
#mutate(`day-1`= scale(`day-1`, center=TRUE, scale=TRUE), `day-7`= scale(`day-7`, center=TRUE, scale=TRUE), `hour-1`= scale(`hour-1`, center=TRUE, scale=TRUE), `hour-2`= scale(`hour-2`, center=TRUE, scale=TRUE)) %>% tail(-168)
#lagged_data <- data %>% select(Year, Month, Day, Hours, dayofweek, TotalLoadValue)
# Sin/cosine transform the time variables
lagged_data_sd$Hours_sin = sin(2*pi*lagged_data_sd$Hours/24)
lagged_data_sd$Hours_cos = cos(2*pi*lagged_data_sd$Hours/24)
lagged_data_sd$Month_sin = cos(2*pi*lagged_data_sd$Month/12)
lagged_data_sd$Month_cos = cos(2*pi*lagged_data_sd$Month/12)
lagged_data_sd$Day_sin = cos(2*pi*lagged_data_sd$Day/31)
lagged_data_sd$Day_cos = cos(2*pi*lagged_data_sd$Day/31)
lagged_data_usd$Hours_sin = sin(2*pi*lagged_data_usd$Hours/24)
lagged_data_usd$Hours_cos = cos(2*pi*lagged_data_usd$Hours/24)
lagged_data_usd$Month_sin = cos(2*pi*lagged_data_usd$Month/12)
lagged_data_usd$Month_cos = cos(2*pi*lagged_data_usd$Month/12)
lagged_data_usd$Day_sin = cos(2*pi*lagged_data_usd$Day/31)
lagged_data_usd$Day_cos = cos(2*pi*lagged_data_usd$Day/31)
# Remove outliers
lagged_data_sd <- lagged_data_sd[!lagged_data_sd$TotalLoadValue %in% boxplot.stats(lagged_data_sd$TotalLoadValue)$out,]
lagged_data_usd <- lagged_data_usd[!lagged_data_usd$TotalLoadValue %in% boxplot.stats(lagged_data_usd$TotalLoadValue)$out,]
# Train/Test split
#find_row_number <- lagged_data_sd %>% mutate(rownum <- row_number()) %>% filter(Year == 2019, Month == 10, Day == 19)
train <- lagged_data_sd[1:42380,]
test <- lagged_data_sd[42381:nrow(lagged_data_sd),]
X_train = train %>% select(-Year, -TotalLoadValue, -Hours, -Day, -Month)
y_train = train %>% select(TotalLoadValue)
X_test = test %>% select(-Year, -TotalLoadValue, -Hours, -Day, -Month)
y_test = test %>% select(TotalLoadValue)
#For predicting and comparing to test set after
test_pred <- lagged_data_usd[42381:nrow(lagged_data_usd),] %>% mutate(`day-1`= sqrt(`day-1`), `day-7`= sqrt(`day-7`), `hour-1`= sqrt(`hour-1`), `hour-2`= sqrt(`hour-2`))
X_test_pred <- test_pred %>% select(-Year, -TotalLoadValue, -Hours, -Day, -Month)
Y_test_pred = test %>% select(TotalLoadValue) %>% mutate(TotalLoadValue = TotalLoadValue)
set.seed("2022")
model1 <- keras_model_sequential() %>%
layer_dense(64, activation = "relu") %>%
layer_dense(64, activation = "relu") %>%
layer_dense(1, activation = "linear")
model1 <- model1 %>% compile(optimizer = optimizer_adam(), loss = 'mean_absolute_error')
history1 <- model1 %>% fit(as.matrix(X_train), as.matrix(y_train), validation_split = 0.2, epochs = 15)
plot(history1)
model2 <- keras_model_sequential() %>%
layer_lstm(units = 64) %>%
layer_dense(units = 64, activation="relu") %>%
layer_dropout(0.3) %>%
layer_dense(units = 64, activation="relu") %>%
layer_dropout(0.3) %>%
layer_dense(1, activation="linear")
model2 <- model2 %>% compile(optimizer = optimizer_adam(), loss = 'mean_absolute_error')
history2 <- model2 %>% fit(as.matrix(X_train), as.matrix(y_train), validation_split = 0.2, epochs = 15)
model2 <- keras_model_sequential() %>%
layer_lstm(units = 64) %>%
layer_dense(units = 64, activation="relu") %>%
layer_dropout(0.3) %>%
layer_dense(units = 64, activation="relu") %>%
layer_dropout(0.3) %>%
layer_dense(1, activation="linear")
model2 <- model2 %>% compile(optimizer = optimizer_adam(), loss = 'mean_absolute_error')
history2 <- model2 %>% fit(as.matrix(X_train), as.matrix(y_train), validation_split = 0.2, epochs = 15)
model1 %>% evaluate(as.matrix(X_test),as.matrix(y_test))
train_graph <- train %>% mutate(rownumber = row_number())
y <- predict(model1, as.matrix(X_train))
x <- seq(1, nrow(y), length.out = nrow(y))
ggplot(train) + geom_line(aes(x=x, y = TotalLoadValue, colour = "data"), size = 0.1) + geom_line(data = data.frame(train_graph$rownumber,y), aes(x=train_graph$rownumber, y=y, colour="prediction"), size = 0.1)
train_actual_graph <- train[1:1000,]
train_graph <- train_graph[1:1000,]
y <- y[1:1000,]
x <- seq(1, 1000, length.out = 1000)
ggplot(train_actual_graph) + geom_line(aes(x=x, y = TotalLoadValue, colour = "data")) + geom_line(data = data.frame(train_graph$rownumber,y), aes(x=train_graph$rownumber, y=y, colour="prediction"))
#append date
predictions <- data.frame(rownumber = numeric(0), prediction = numeric(0))
for (i in 1:nrow(X_test_pred)) {
if (i == 1) {
prediction_i <- sqrt(predict(model1, as.matrix(X_test_pred[i,])))
predictions[i,] <- c(i, prediction_i)
}
else if (i > 1 & i < 25) {
X_test_pred$`hour-1`[i] = prediction_i
X_test_pred$`hour-2`[i] = X_test_pred$`hour-1`[i-1]
prediction_i <- sqrt(predict(model1, as.matrix(X_test_pred[i,])))
predictions[i,] <- c(i, prediction_i)
}
else if (i > 24 & i < 169) {
X_test_pred$`hour-1`[i] = prediction_i
X_test_pred$`hour-2`[i] = X_test_pred$`hour-1`[i-1]
X_test_pred$`day-1`[i] = predictions[i-24,2]
prediction_i <- sqrt(predict(model1, as.matrix(X_test_pred[i,])))
predictions[i,] <- c(i, prediction_i)
}
else {
X_test_pred$`hour-1`[i] = prediction_i
X_test_pred$`hour-2`[i] = X_test_pred$`hour-1`[i-1]
X_test_pred$`day-1`[i] = predictions[i-24,2]
X_test_pred$`day-7`[i] = predictions[i-168,2]
prediction_i <- sqrt(predict(model1, as.matrix(X_test_pred[i,])))
predictions[i,] <- c(i, prediction_i)
}
}
Y_test_pred
x <- seq(1, nrow(predictions), length.out = nrow(predictions))
ggplot(Y_test_pred) + geom_line(aes(x=x, y = TotalLoadValue, colour = "data")) + geom_line(data = final_predictions, aes(x=rownumber, y=TotalLoadValue, colour="prediction"))
Y_test_pred
final_predictions <- predictions %>% mutate(TotalLoadValue = prediction^2)
x <- seq(1, nrow(predictions), length.out = nrow(predictions))
ggplot(Y_test_pred) + geom_line(aes(x=x, y = TotalLoadValue, colour = "data")) + geom_line(data = final_predictions, aes(x=rownumber, y=TotalLoadValue, colour="prediction"))
final <- test
final$TotalLoadValuePred = final_predictions$TotalLoadValue
final <- final %>% group_by(Year, Month, Day) %>% summarise(TotalLoadValue = sum(TotalLoadValuePred))
Y_test_pred
final
write.csv(final, "../models/predictions/raw_nn_preds.csv")
pwd
q()
library(dplyr)
library(fpp3)
TRAIN_START_DATE = "2014-12-01"
TRAIN_END_DATE = "2019-10-19"
TEST_START_DATE = "2019-10-18"
TEST_END_DATE = "2021-06-02"
dhr_data = read.csv("../data/all_data_daily.csv") %>%
mutate(Date = as.Date(Date, "%Y-%m-%d")) %>%
filter(Country=="Austria") %>%
select(Date, TotalLoadValue) %>%
as_tsibble()
dhr_train = dhr_data %>% filter(Date < TEST_START_DATE)
dhr_test = dhr_data %>% filter(Date >= TEST_START_DATE)
load("../models/austria_dhr.rda") # dhr_mod loaded
nn_preds_raw <- read.csv("../models/predictions/raw_nn_preds.csv")
View(dhr_mod)
dhr_mod %>% select(dhr)
nn_preds_raw <- read.csv("../models/predictions/raw_nn_preds.csv")
View(nn_preds_raw)
nn_preds_raw
ymd
ymd()
ymd(20,12,01)
ymd("20,12,01")
library(glue)
paste("hey {1+2}")
glue("hey {1+2}")
nn_preds_raw %>% mutate(
Date = ymd(glue("{Year}-{Month}-{Day}"))
)
nn_preds_raw %>%
mutate(Date = ymd(glue("{Year}-{Month}-{Day}"))) %>%
select(Date, TotalLoadValue)
nn_preds_raw %>%
mutate(Date = ymd(glue("{Year}-{Month}-{Day}"))) %>%
select(Date, TotalLoadValue) %>%
as_tsibble()
nn_preds <- nn_preds_raw %>%
mutate(Date = ymd(glue("{Year}-{Month}-{Day}"))) %>%
select(Date, TotalLoadValue) %>%
as_tsibble()
nn_preds <- nn_preds_raw %>%
mutate(Date = ymd(glue("{Year}-{Month}-{Day}"))) %>%
select(Date, TotalLoadValue) %>%
filter(Date >= TEST_START_DATE) %>%
as_tsibble()
View(nn_preds)
View(dhr_test)
forecast(dhr_mod, h = h) %>%
autoplot(dhr_train) %>%
autoplot(nn_preds)
h = nrow(dhr_test)
forecast(dhr_mod, h = h) %>%
autoplot(dhr_train) %>%
autoplot(nn_preds)
h = nrow(dhr_test)
forecast(dhr_mod, h = h) %>%
autoplot(dhr_train)
library(ggplot2)
forecast(dhr_mod, h = h) %>%
autoplot(dhr_train) + title("")
forecast(dhr_mod, h = h) %>%
autoplot(dhr_train, title="DHR Forecasts")
forecast(dhr_mod, h = h) %>%
autoplot(dhr_train) + labs( title="DHR Forecasts")
dhr_mod$dhr
View(dhr_mod)
View(dhr_mod[[1]][[1]])
dhr_mod$dhr$data
data = read.csv("../data/all_data_daily.csv") %>%
mutate(Date = as.Date(Date, "%Y-%m-%d")) %>%
filter(Country=="Austria") %>%
select(Date, TotalLoadValue) %>%
as_tsibble()
train = dhr_data %>% filter(Date < TEST_START_DATE)
test = dhr_data %>% filter(Date >= TEST_START_DATE)
forecast_days =
data = read.csv("../data/all_data_daily.csv") %>%
mutate(Date = as.Date(Date, "%Y-%m-%d")) %>%
filter(Country=="Austria") %>%
select(Date, TotalLoadValue) %>%
as_tsibble()
train = dhr_data %>% filter(Date < TEST_START_DATE)
test = dhr_data %>% filter(Date >= TEST_START_DATE)
forecast_days = nrow(test)
h = nrow(dhr_test)
forecast(dhr_mod, h = forecast_days) %>%
autoplot(train) + labs(title="DHR Forecasts")
dhr_mod %>% forecast(h=forecast_days)
nn_preds <- nn_preds_raw %>%
mutate(Date = ymd(glue("{Year}-{Month}-{Day}"))) %>%
select(Date, TotalLoadValue) %>%
filter(Date >= TEST_START_DATE)
?rename
dhr_mod %>%
forecast(h=forecast_days) %>%
select(Date, .mean) %>%
rename(TotalLoadValue = .mean)
dhr_mod %>%
forecast(h=forecast_days) %>%
select(Date, .mean) %>%
rename("TotalLoadValue" = .mean)
dhr_mod %>%
forecast(h=forecast_days) %>%
select(Date, .mean) %>%
rename(.mean = "hi")
dhr_mod %>%
forecast(h=forecast_days) %>%
select(Date, .mean)
dhr_mod %>%
forecast(h=forecast_days)
dhr_mod %>%
forecast(h=forecast_days) %>%
select(Date, .mean) %>%
select(Date)
dhr_mod %>%
forecast(h=forecast_days) %>%
select(Date)
dhr_mod %>%
forecast(h=forecast_days) %>%
select(Date, TotalLoadValue)
dhr_mod %>%
forecast(h=forecast_days) %>%
select(Date, TotalLoadValue, .mean)
dhr_mod %>%
forecast(h=forecast_days) %>%
select(Date, TotalLoadValue, .mean) %>%
as_tsibble()
dhr_mod %>%
forecast(h=forecast_days) %>%
select(Date, TotalLoadValue, .mean) %>%
as_tsibble(index=Date)
dhr_mod %>%
forecast(h=forecast_days) %>%
select(Date, TotalLoadValue, .mean) %>%
as_tsibble(index=Date) %>%
rename(Total = .mean)
dhr_mod %>%
forecast(h=forecast_days) %>%
select(Date, TotalLoadValue, .mean) %>%
as_tsibble(index=Date) %>%
rename(TotalLoadValue = .mean)
dhr_mod %>%
forecast(h=forecast_days) %>%
as_tsibble(index=Date) %>%
select(Date, .mean) %>%
rename(TotalLoad = .mean)
dhr_mod %>%
forecast(h=forecast_days) %>%
as_tsibble(index=Date) %>%
select(Date, .mean) %>%
rename(TotalLoadValue = .mean)
nn_preds <- nn_preds_raw %>%
mutate(Date = ymd(glue("{Year}-{Month}-{Day}"))) %>%
select(Date, TotalLoadValue) %>%
filter(Date >= TEST_START_DATE) %>%
as_tsibble()
nn_preds <- nn_preds_raw %>%
mutate(Date = ymd(glue("{Year}-{Month}-{Day}"))) %>%
select(Date, TotalLoadValue) %>%
filter(Date >= TEST_START_DATE) %>%
as_tsibble(index=Date)
dhr_preds <- dhr_mod %>%
forecast(h=forecast_days) %>%
as_tsibble(index=Date) %>%
select(Date, .mean) %>%
rename(TotalLoadValue = .mean)
merge(dhr_preds, nn_preds, by="Date")
?merge
merge(dhr_preds, nn_preds, test, by="Date", suffixes = c("dhr", "nn", "true"))
merge(dhr_preds, nn_preds, by="Date", suffixes = c("dhr", "nn"))
merge(dhr_preds, nn_preds, by="Date", suffixes = c(".dhr", ".nn"))
merge(dhr_preds, nn_preds, by="Date", suffixes = c(".dhr", ".nn")) %>%
merge(test, by="Date")
all_preds <- merge(dhr_preds, nn_preds, by="Date", suffixes = c(".dhr", ".nn")) %>%
merge(test, by="Date")
all_preds %>% ggplot(aes(x=Date, y=TotalLoadValue)) +
geom_line()
all_preds %>% ggplot(aes(x=Date, y=TotalLoadValue.dhr)) +
geom_line()
all_preds %>% ggplot(aes(x=Date, y=TotalLoadValue.nn)) +
geom_line()
pivot_longer(all_preds, cols = c("TotalLoadValue.dhr", "TotalLoadValue.nn"),
names_to="model", values_to="pred")
all_preds <- merge(dhr_preds, nn_preds, by="Date", suffixes = c(".dhr", ".nn"))
pivot_longer(all_preds, cols = c("TotalLoadValue.dhr", "TotalLoadValue.nn"),
names_to="model", values_to="pred")
all_preds %>% ggplot(aes(x=Date, y=preds, color = model()))
all_preds %>% ggplot(aes(x=Date, y=preds, color = model))
all_preds %>% ggplot(aes(x=Date, y=pred, color = model))
all_preds <- merge(dhr_preds, nn_preds, by="Date", suffixes = c(".dhr", ".nn")) %>%
pivot_longer(cols = c("TotalLoadValue.dhr", "TotalLoadValue.nn"),
names_to="model", values_to="pred")
View(all_preds)
all_preds %>% ggplot(aes(x=Date, y=pred, color = model))
all_preds %>% ggplot(aes(x=Date, y=pred, color = model)) + geom_line()
nn_preds %>% autoplot(train)
nn_preds
train
nn_preds %>% autoplot(test)
ggplot(train)
train %>% ggplot(aes(x=Date, y=TotalLoadValue))
train %>% ggplot(aes(x=Date, y=TotalLoadValue)) + geom_line()
train %>% ggplot(aes(x=Date, y=TotalLoadValue)) + geom_line() +
geom_line()
train %>% ggplot(aes(x=Date, y=TotalLoadValue)) + geom_line() +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue))
train %>% ggplot(aes(x=Date, y=TotalLoadValue)) + geom_line() +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red")
train %>% ggplot(aes(x=Date, y=TotalLoadValue)) + geom_line() +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red") +
geom_line(data=dhr_preds, aes(x=Date, y=TotalLoadValue), color="blue")
ggplot() +
geom_line(data=data, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red") +
geom_line(data=dhr_preds, aes(x=Date, y=TotalLoadValue), color="blue")
ggplot() +
geom_line(data=data, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red", alpha=0.4) +
geom_line(data=dhr_preds, aes(x=Date, y=TotalLoadValue), color="blue", alpha=0.4)
ggplot() +
geom_line(data=data, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red", alpha)
ggplot() +
geom_line(data=data, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red")
ggplot() +
geom_line(data=train, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red")
ggplot() +
geom_line(data=train, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red") +
title("Yo")
ggplot() +
geom_line(data=train, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red") +
labs(title="Yo")
ggplot() +
geom_line(data=train, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red") +
labs(title="NN Forecasts")
1e6
5e6
ggplot() +
geom_line(data=train, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red") +
ylim(0, 1.5e6)
ggplot() +
geom_line(data=train, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red") +
ylim(0, 1.4e6)
ggplot() +
geom_line(data=train, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red") +
ylim(0, 1.4e6) +
labs(title="NN Forecasts")
ggplot() +
geom_line(data=test, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red")
ggplot() +
geom_line(data=test, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red", alpha=0.4)
ggplot() +
geom_line(data=test, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red", alpha=0.4) +
geom_line(data=dhr_preds, aes(x=Date, y=TotalLoadValue), color="blue", alpha=0.4)
ggplot() +
geom_line(data=test, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red", alpha=0.4) +
geom_line(data=dhr_preds, aes(x=Date, y=TotalLoadValue), color="blue", alpha=0.5)
p <- ggplot() +
geom_line(data=test, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red", alpha=0.4) +
geom_line(data=dhr_preds, aes(x=Date, y=TotalLoadValue), color="blue", alpha=0.5)
p
ggplot() +
geom_line(data=test, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red", alpha=0.4) +
geom_line(data=dhr_preds, aes(x=Date, y=TotalLoadValue), color="blue", alpha=0.5) +
labs(colour = "red")
ggplot() +
geom_line(data=test, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red", alpha=0.4) +
geom_line(data=dhr_preds, aes(x=Date, y=TotalLoadValue), color="blue", alpha=0.5) +
labs(color = "Legend")
cmap <- c("DHR" = "blue", "NN" = "red", "True" = "black")
ggplot() +
geom_line(data=test, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="red", alpha=0.4) +
geom_line(data=dhr_preds, aes(x=Date, y=TotalLoadValue), color="blue", alpha=0.5) +
labs(color = "Legend") + scale_color_manual(values = cmap)
ggplot() +
geom_line(data=test, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue), color="NN", alpha=0.4) +
geom_line(data=dhr_preds, aes(x=Date, y=TotalLoadValue), color="DHR", alpha=0.5) +
labs(color = "Legend") + scale_color_manual(values = cmap)
ggplot() +
geom_line(data=test, aes(x=Date, y=TotalLoadValue)) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue, color="NN"), alpha=0.4) +
geom_line(data=dhr_preds, aes(x=Date, y=TotalLoadValue, color="DHR"), alpha=0.5) +
labs(color = "Legend") + scale_color_manual(values = cmap)
ggplot() +
geom_line(data=test, aes(x=Date, y=TotalLoadValue, color="True")) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue, color="NN"), alpha=0.4) +
geom_line(data=dhr_preds, aes(x=Date, y=TotalLoadValue, color="DHR"), alpha=0.5) +
labs(color = "Legend") + scale_color_manual(values = cmap)
ggplot() +
geom_line(data=test, aes(x=Date, y=TotalLoadValue, color="True")) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue, color="NN"), alpha=0.4) +
geom_line(data=dhr_preds, aes(x=Date, y=TotalLoadValue, color="DHR"), alpha=0.5) +
labs(color = "Legend", title="Predictions vs True") + scale_color_manual(values = cmap)
nn_preds %>% accuracty(data)
nn_preds %>% accuracy(data)
dhr_mod %>% forecast(h=h) %>% accuracydata)
dhr_mod %>% forecast(h=h) %>% accuracy(data)
library(caret)
window()
?window
window(nn_preds)
mable()
library(Metrics)
install.packages('Metrics')
library(Metrics)
rmse(nn_preds$TotalLoadValue, test$TotalLoadValue)
rmse(dhr_preds$TotalLoadValue, test$TotalLoadValue)
rmse(dhr_preds$TotalLoadValue, test$TotalLoadValue)
data.frame(
.model = c("DHR", "NN"),
RMSE = c(
rmse(dhr_preds$TotalLoadValue, test$TotalLoadValue),
rmse(nn_preds$TotalLoadValue, test$TotalLoadValue)
)
)
data.frame(
.model = c("DHR", "NN"),
RMSE = c(
rmse(dhr_preds$TotalLoadValue, test$TotalLoadValue),
rmse(nn_preds$TotalLoadValue, test$TotalLoadValue)
),
MAE = c(
mae(dhr_preds$TotalLoadValue, test$TotalLoadValue),
mae(nn_preds$TotalLoadValue, test$TotalLoadValue)
),
MAPE = c(
mape(dhr_preds$TotalLoadValue, test$TotalLoadValue),
mape(nn_preds$TotalLoadValue, test$TotalLoadValue)
)
)
data.frame(
.model = c("DHR", "NN"),
RMSE = c(
rmse(dhr_preds$TotalLoadValue, test$TotalLoadValue),
rmse(nn_preds$TotalLoadValue, test$TotalLoadValue)
),
MAE = c(
mae(dhr_preds$TotalLoadValue, test$TotalLoadValue),
mae(nn_preds$TotalLoadValue, test$TotalLoadValue)
),
MAPE = c(
mape(dhr_preds$TotalLoadValue, test$TotalLoadValue),
mape(nn_preds$TotalLoadValue, test$TotalLoadValue)
)
)
ggplot() +
geom_line(data=test, aes(x=Date, y=TotalLoadValue, color="True")) +
geom_line(data=nn_preds, aes(x=Date, y=TotalLoadValue, color="NN"), alpha=0.4) +
geom_line(data=dhr_preds, aes(x=Date, y=TotalLoadValue, color="DHR"), alpha=0.5) +
labs(color = "Legend", title="Test Set Prediction") +
scale_color_manual(values = cmap)
library(fpp3)
library(dplyr)
TEST_START_DATE = "2019-10-18"
data <- read.csv("../data/all_data_daily.csv") %>%
mutate(Date = as.Date(Date, "%Y-%m-%d"))
data_train <- data %>% filter(Date < TEST_START_DATE)
elec_austria <- data_train %>% filter(Country=="Austria") %>%
select(Date, TotalLoadValue) %>% as_tsibble()
elec_austria_fit <- elec_austria %>%
model(
dhr = ARIMA(TotalLoadValue ~ fourier(period="year", K=4),
stepwise=FALSE, order_constraint = (p+q <= 8 & P+Q <= 5)),
arima = ARIMA(TotalLoadValue, stepwise=FALSE,
order_constraint = (p+q <= 8 & P+Q <= 5)),
ets = ETS(TotalLoadValue)
)
